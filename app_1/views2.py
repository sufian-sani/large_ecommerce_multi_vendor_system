from django.shortcuts import render,HttpResponse, redirect
from .models import Category, Subcategory_1, Subcategory_2, Products, Brand
from vendor_dashboard_app.models import vendor_registration_table, vendor_PO_NUMBER, vendor_payment_info
from checkout.models import Order_Table, Order_Table_2
from app_1.models import User
import datetime
from django.db.models import Q
from datetime import datetime
from datetime import timedelta
from datetime import datetime
from app_1.models import campaign_table



from pathlib import Path
import os
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


from django.http import FileResponse
from reportlab.pdfgen import canvas
from django.http import HttpResponse
from reportlab.lib.colors import Color, black, blue, red
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle,Paragraph
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, inch
from reportlab.lib.units import mm, inch




# end pdf code here Multiple csv
import csv
from datetime import datetime



def dashboard_csv_product(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')


    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        all_product_Category  = Category.objects.all()
        all_product_Products  = Products.objects.all()
        all_product_Brand  = Brand.objects.all()
        all_product_User = User.objects.all()
        all_product_vendor_registration_table = vendor_registration_table.objects.all()
        all_product_Order_Table = Order_Table.objects.all()
        all_campaign_table = campaign_table.objects.all()

        print('all_product_vendor_registration_table')
        print(all_product_vendor_registration_table)

        contex = {
            'all_product_Category':all_product_Category,
            'all_product_Products':all_product_Products,
            'all_product_Brand':all_product_Brand,
            'all_product_User':all_product_User,
            'all_product_vendor_registration_table':all_product_vendor_registration_table,
            'all_product_Order_Table':all_product_Order_Table,
            'all_campaign_table':all_campaign_table,

        }

        return render(request, 'dashboard_csv_product.html', contex)

    else:
        return redirect('deshboard_login')


import datetime
def all_product_order_for_csv(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')
    
    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        #all product filter
        all_product_order_Order_Date = request.POST.get('all_product_order_Order_Date')
        # requler_all_product_order_Order_Date = request.POST.get('requler_all_product_order_Order_Date')
        #
        # if requler_all_product_order_Order_Date:
        #     all_product_order_Order_Date = requler_all_product_order_Order_Date
    
        all_Product_start_from_date = request.POST.get('all_Product_start_from_date')
    
    
    
        all_Product_start_to_date = request.POST.get('all_Product_start_to_date')
    
        i_am_Generate_PO = request.POST.get('i_am_Generate_PO')
    
        print(type(all_Product_start_from_date))
        print('all_Product_start_from_date')
        print(all_Product_start_from_date)
        print(all_Product_start_to_date)
    
        all_Product_processing = request.POST.get('all_Product_processing')
        all_Product_Pending_Payment = request.POST.get('all_Product_Pending_Payment')
        all_Product_Partially_Paid = request.POST.get('all_Product_Partially_Paid')
        all_Product_Ready_To_Ship = request.POST.get('all_Product_Ready_To_Ship')
        all_Product_Completed = request.POST.get('all_Product_Completed')
        all_Product_Cancelled = request.POST.get('all_Product_Cancelled')
        all_Product_Refunded = request.POST.get('all_Product_Refunded')
        all_Product_Picked = request.POST.get('all_Product_Picked')
        all_Product_On_hold = request.POST.get('all_Product_On_hold')
        all_Product_Failed = request.POST.get('all_Product_Failed')
    
        Select_Order_Statuses_all = request.POST.getlist('Select_Order_Statuses_all')
    
        #for taking hidden inputs
        name_dashboard_csv_product = request.POST.get('name_dashboard_csv_product')
        name_dashboard_csv_order = request.POST.get('name_dashboard_csv_order')
        name_reguler_value_dashboard_csv_product = request.POST.get('name_reguler_value_dashboard_csv_product')
        name_campaign_value_dashboard_csv_product = request.POST.get('name_campaign_value_dashboard_csv_product')
        
        print('name_campaign_value_dashboard_csv_product kkkkkkkkkk')
        print(name_campaign_value_dashboard_csv_product)
        
        print('name_reguler_value_dashboard_csv_productreeererererererererere')
        print(name_reguler_value_dashboard_csv_product)
        
        if name_campaign_value_dashboard_csv_product:
            report_product_campaign = request.POST.getlist('report_product_campaign')
    
            all_Product_start_from_date = '2021-04-01'
    
            all_Product_start_to_date = datetime.datetime.now().date()
    
            print('all_Product_start_from_dateuuuuuuuuuuuu')
            print(all_Product_start_from_date)
            print(all_Product_start_to_date)
    
        all_product_Category_multiple = request.POST.getlist('all_product_Category_multiple')
        all_product_Products_multiple = request.POST.getlist('all_product_Products_multiple')
        all_product_Brand_Name_multiple = request.POST.getlist('all_product_Brand_Name_multiple')
        all_product_User_multiple = request.POST.getlist('all_product_User_multiple')
        all_product_vendor_registration_table_multiple = request.POST.getlist('all_product_vendor_registration_table_multiple')
        all_product_vendor_Order_Table_multiple = request.POST.getlist('all_product_vendor_Order_Table_multiple')
        all_product_vendor_Order_Table_Shopping_multiple = request.POST.getlist('all_product_vendor_Order_Table_Shopping_multiple')
    
    
        # Select_Fields_to_Export_Item_No = request.POST.get('Select_Fields_to_Export_Item_No')
        # Select_Fields_to_Export_Item_Name = request.POST.get('Select_Fields_to_Export_Item_Name')
        # Select_Fields_to_Export_Quantity = request.POST.get('Select_Fields_to_Export_Quantity')
        # Select_Fields_to_Export_MRP = request.POST.get('Select_Fields_to_Export_MRP')
        # Select_Fields_to_Export_Cost = request.POST.get('Select_Fields_to_Export_Cost')
        # Select_Fields_to_Export_Discount = request.POST.get('Select_Fields_to_Export_Discount')
        # Select_Fields_to_Export_Total_MRP = request.POST.get('Select_Fields_to_Export_Total_MRP')
        # Select_Fields_to_Export_Total_Cost = request.POST.get('Select_Fields_to_Export_Total_Cost')
        # Select_Fields_to_Export_Total_Discounted = request.POST.get('Select_Fields_to_Export_Total_Discounted')
    
        Select_Fields_to_Export_Brands = request.POST.get('Select_Fields_to_Export_Brands')
        Select_Fields_to_Export_Category = request.POST.get('Select_Fields_to_Export_Category')
        Select_Fields_to_Export_Subcategory_1 = request.POST.get('Select_Fields_to_Export_Subcategory_1')
    
        # Select_Fields_to_Export_TYPE_OF_PRODUCTS = request.POST.get('Select_Fields_to_Export_TYPE_OF_PRODUCTS')
        Select_Fields_to_Export_Vendor = request.POST.get('Select_Fields_to_Export_Vendor')
        Select_Fields_to_Export_product_link = request.POST.get('Select_Fields_to_Export_product_link')
    
        #start 9 item
    
    
        if all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEFGHI')
        # end 9 item
    
        # start 8 item
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEFGH ')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEFGI ')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEFHI ')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEGHI ')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDFGHI ')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCEFGHI ')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABDEFGHI ')
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ACDEFGHI ')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('BCDEFGHI')
    
    
    
    
        # end 8 item
    
        #start item 7
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEFG')
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEFH')
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEFI')
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEGH')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEGI')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDEHI')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDFGI')
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDFHI')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCDGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCEFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCEFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCEFHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCEGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABCFGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABDEFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
    
            print('ABDEFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
    
            print('ABDEFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFGH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFHI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFGHI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFGHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFGHI')
    
        #end item 7
    
        #start item 6
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEF')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEH ')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDEI ')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDFG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDFH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDFI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEFI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEFI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFGH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFG')
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEFI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEGHI')
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFGHI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFGH')
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFGHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFG')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEFI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEGH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEGI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFGH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFGI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDGHI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFGH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFGI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFGHI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFGH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFHI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEGHI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFGHI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFGHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFGH')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFGI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEGHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFGHI')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFGHI')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all :
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFGHI')
    
        # end item 6
    
        #start item 5
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDE')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDF')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
    
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCDI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEF')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEG')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEH')
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCEI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCFI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCHI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEF')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDEI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDFI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEFI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEGH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEGI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFGI')
    
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABGHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEF')
    
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEG')
    
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDEI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDFI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFG')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEFI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEGI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFGI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFHI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACGHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFG')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEFI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEGH')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEGI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEHI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADGHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFGH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFGI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEGHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEF')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEG')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEH')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDEI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFG')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFH')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDFI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDGH')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDGI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFG')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEFI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEGH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEGI')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEHI')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFGH')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFGI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFHI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCGHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFG')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEFI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEGH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFGH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFHI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDGHI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFGH')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFGI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFHI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEGHI')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFGHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFG')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFH')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEFI')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEGH')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEGI')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFGH')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFGI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDGHI')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFGH')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFGI')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFHI')
    
    
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEGHI')
    
    
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFGHI')
    
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFGH')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFGI')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFHI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEGHI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFGHI')
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFGHI')
    
        #end item 5
    
        # start item 4
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCD')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCE')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCF')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABCI')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDE')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDF')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABDI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEF')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABEI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFG')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABFI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABGH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABGI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABHI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDE')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDF')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDH')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACDI')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEF')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEG')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEH')
    
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACEI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACFI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACGH')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACHI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEF')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEG')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADEI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFG')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFH')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADFI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADGH')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADGI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFG')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFH')
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEFI')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEGH')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEGI')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFGH')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFHI')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AGHI')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDE')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDF')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDG')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCDI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEF')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEG')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCEI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFG')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCFI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCGH')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCHI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEF')
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEG')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEH')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDEI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFG')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDFI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDGH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDGI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDHI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFG')
    
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFH')
    
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEFI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEGH')
    
    
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFGH')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BGHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEF')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEG')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEH')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDEI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFG')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFH')
    
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDFI')
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDGH')
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDGI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDHI')
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFG')
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFH')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEFI')
    
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEGH')
    
    
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEGI')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEHI')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFGH')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFGI')
    
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFHI')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CGHI')
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFG')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFH')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEFI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEGH')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEGI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEHI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFGH')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFGI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFHI')
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DGHI')
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFGH')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFGI')
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFHI')
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EGHI')
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FGHI')
    
    
    
        #item 4 end
    
        #start item 3
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Products_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABC')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABD')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABE')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABF')
    
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABG')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABH')
    
    
    
        elif all_Product_start_from_date and all_product_Category_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ABI')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACD')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACE')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACF')
    
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACG')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACH')
    
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ACI')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADE')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADF')
    
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADG')
    
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADH')
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('ADI')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEF')
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEG')
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEH')
    
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AEI')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFG')
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFH')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AFI')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AGH')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AGI')
    
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AHI')
    
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCD')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCE')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCF')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCG')
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCH')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BCI')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDE')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDF')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDG')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDH')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BDI')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEF')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEG')
    
    
        elif all_product_Category_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEH')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BEI')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFG')
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFH')
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BFI')
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BGH')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BGI')
    
    
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BHI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDE')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDF')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDG')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDH')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CDI')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEF')
    
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEG')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEH')
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CEI')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFG')
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFH')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CFI')
    
    
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CGH')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CGI')
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CHI')
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEF')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEG')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEH')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DEI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFG')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFH')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DFI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DGH')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DGI')
    
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DHI')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFG')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFH')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EFI')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EGH')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EGI')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EHI')
    
    
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FGH')
    
    
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FGI')
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FHI')
    
    
    
    
        elif all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('GHI')
    
        #item 3 end
    
        # item 2 start
    
    
        elif all_Product_start_from_date and all_product_Category_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Category__Category_Name__in=all_product_Category_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AB')
    
    
    
        elif all_Product_start_from_date and all_product_Products_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AC')
    
    
        elif all_Product_start_from_date and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AD')
    
    
    
        elif all_Product_start_from_date and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AE')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AF')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AG')
    
    
    
        elif all_Product_start_from_date and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('AH')
    
    
    
        elif all_Product_start_from_date and Select_Order_Statuses_all:
            print('sohel')
            d = Order_Table_2.objects.all()
            for i in d:
                print(i.Order_Id)
                print(i.New_Order_Status)
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            print('get_total_Order_Table_2')
            print('get_total_Order_Table_2')
            print(get_total_Order_Table_2)
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range=[all_Product_start_from_date, all_Product_start_to_date]).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print(get_total_Order_Table_2)
            print('AI')
    
    
    
        elif all_product_Category_multiple and all_product_Products_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BC')
    
    
    
        elif all_product_Category_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BD')
    
    
    
        elif all_product_Category_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BE')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BF')
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BG')
    
    
    
        elif all_product_Category_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BH')
    
    
        elif all_product_Category_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('BI')
    
    
    
        elif all_product_Products_multiple and all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CD')
    
    
    
    
        elif all_product_Products_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CE')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CF')
    
    
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CG')
    
    
    
        elif all_product_Products_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CH')
    
    
    
        elif all_product_Products_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('CI')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DE')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DF')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DG')
    
    
    
        elif all_product_Brand_Name_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DH')
    
    
    
        elif all_product_Brand_Name_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('DI')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EF')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EG')
    
    
    
    
        elif all_product_User_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EH')
    
    
    
    
        elif all_product_User_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('EI')
    
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FG')
    
    
    
    
        elif all_product_vendor_registration_table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FH')
    
    
    
    
        elif all_product_vendor_registration_table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('FI')
    
    
    
    
        elif all_product_vendor_Order_Table_multiple and all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('GH')
    
    
    
        elif all_product_vendor_Order_Table_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('GI')
    
    
    
    
        elif all_product_vendor_Order_Table_Shopping_multiple and Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('HI')
    
    #end of item 2
    
        #start of item 1
    
        elif all_Product_start_from_date:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Q(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date])).order_by('Order_Id__Order_Date')
            for i in get_total_Order_Table_2:
                print('i.Campaign.campaign_name')
                print(i.Campaign)
                print(i)
    
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Order_Date__range = [all_Product_start_from_date, all_Product_start_to_date]).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
    
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('A')
    
    
    
        elif all_product_Category_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Category__Category_Name__in=all_product_Category_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('B')
    
    
    
        elif all_product_Products_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Product_Name__in=all_product_Products_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('C')
    
    
    
        elif all_product_Brand_Name_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Product__Brand__Brand_Name__in=all_product_Brand_Name_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('D')
    
    
        elif all_product_User_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Customer__username__in=all_product_User_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('E')
    
    
    
        elif all_product_vendor_registration_table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Vendors__vendor_shop_name__in=all_product_vendor_registration_table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('F')
    
    
    
        elif all_product_vendor_Order_Table_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Payment_method__in=all_product_vendor_Order_Table_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('G')
    
    
    
        elif all_product_vendor_Order_Table_Shopping_multiple:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Order_Id__Shopping__in=all_product_vendor_Order_Table_Shopping_multiple).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('H')
    
    
    
        elif Select_Order_Statuses_all:
            get_total_Order_Table_2 = Order_Table_2.objects.filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Order_Date')
            if all_product_order_Order_Date == 'Paid Date':
                get_total_Order_Table_2 = Order_Table_2.objects.filter(Q(Order_Id__Order_Status__in=Select_Order_Statuses_all, New_Order_Status = '') | Q(New_Order_Status__in = Select_Order_Statuses_all, Order_Id__Order_Status__in=['Processing', 'Partially Paid'])).order_by('Order_Id__Paid_Date')
            if name_reguler_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Order_Id__Campaign_Status = 'Reguler')
                print("i am in regurel")
                print(get_total_Order_Table_2)
            if name_campaign_value_dashboard_csv_product:
                get_total_Order_Table_2 = get_total_Order_Table_2.filter(Campaign__campaign_name__in = report_product_campaign)
                print("i am in campaign")
                print(get_total_Order_Table_2)
                print('report_product_campaign_name')
                print(report_product_campaign)
            print('I')
    
    
        #end of item 1
    
    
    # it's for all products order csv
    
        if name_dashboard_csv_product == 'value_dashboard_csv_product':
    
            if i_am_Generate_PO == None:
                date = datetime.datetime.now().strftime('%d-%m-%Y')
                # date = datetime.now().strftime('%d-%m-%Y')
                print('date')
                print(date)
    
                if Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category', 'Subcategory 1',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    print('UNIQ_PRODUCT_NAME')
                    print(UNIQ_PRODUCT_NAME)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
                            print("get_Subcategory_1")
                            print(get_Subcategory_1)
                            print("get_Subcategory_1")
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name ='Empty'
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
    
    
                        print("creat_one_row")
                        print(creat_one_row)
                        print("creat_one_row")
    
    
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABCDE")
    
                    return response
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor:
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(
                        ['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',
                         'Category', 'Subcategory 1', 'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product = 0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    print('UNIQ_PRODUCT_NAME')
                    print(UNIQ_PRODUCT_NAME)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug=i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
                            print("get_Subcategory_1")
                            print(get_Subcategory_1)
                            print("get_Subcategory_1")
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        print("creat_one_row")
                        print(creat_one_row)
                        print("creat_one_row")
    
                        writer.writerow(
                            [Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [
                                get_Category] + [get_Subcategory_1] + [get_vendor_name])
                        creat_one_row = []
                        Item_No = Item_No + 1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABCD ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_product_link:
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(
                        ['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',
                         'Category', 'Subcategory 1'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product = 0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    print('UNIQ_PRODUCT_NAME')
                    print(UNIQ_PRODUCT_NAME)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug=i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
                            print("get_Subcategory_1")
                            print(get_Subcategory_1)
                            print("get_Subcategory_1")
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        print("creat_one_row")
                        print(creat_one_row)
                        print("creat_one_row")
    
                        writer.writerow(
                            [Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [
                                get_Category] + [get_Subcategory_1] )
                        creat_one_row = []
                        Item_No = Item_No + 1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
    
                        print("ABCE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    print('UNIQ_PRODUCT_NAME')
                    print(UNIQ_PRODUCT_NAME)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
    
    
                        print("creat_one_row")
                        print(creat_one_row)
                        print("creat_one_row")
    
    
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABDE ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',  'Subcategory 1',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product



                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ACDE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted',  'Category', 'Subcategory 1',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product

    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Category] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BCDE")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category', 'Subcategory 1'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
                            print('get_Subcategory_1')
                            print(get_Subcategory_1)

                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1.all()

                            print('get_Subcategory_1')
                            print(get_Subcategory_1)
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category] + [get_Subcategory_1] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABC")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category',   'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABD ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category',  'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category]  )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ABE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands  and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Subcategory 1',  'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ACD ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Subcategory_1  and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',  'Subcategory 1',  'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand]  + [get_Subcategory_1]  )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ACE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price

                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'


                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] +  [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("ADE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor :
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Category', 'Subcategory 1',  'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Category] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BCD  ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1  and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted',  'Category', 'Subcategory 1',   'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] +  [get_Category] + [get_Subcategory_1]  )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BCE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Category',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted]  + [get_Category]  + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BDE ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Subcategory 1',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("CDE ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Category:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Category'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
                            get_Category = j.Product.Category.Category_Name
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Category])
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("AB ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Subcategory_1:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'Subcategory 1'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_Subcategory_1] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("AC ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands',  'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("AD ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Brands and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand]  )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("AE ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Subcategory_1:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted',  'Category', 'Subcategory 1'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted]  + [get_Category] + [get_Subcategory_1] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BC ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Category',  'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted]  + [get_Category] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BD ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Category and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted',  'Category', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted]  + [get_Category] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("BE ")
    
                    return response
    
    
    
    
                elif Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Subcategory 1',  'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Subcategory_1] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("CD ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Subcategory_1 and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Subcategory 1',  'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Subcategory_1] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("CE ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Vendor and Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted',  'Vendor', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("DE")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Brands:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Brands'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
                            if j.Product.Brand:
                                get_brand = j.Product.Brand.Brand_Name
                            else:
                                get_brand = 'Empty'
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_brand] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("A")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Category:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Category'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Category = j.Product.Category.Category_Name
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Category])
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("B")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_Subcategory_1:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Subcategory 1'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                            get_Subcategory_1 = j.Product.Subcategory_1
    
                            if get_Subcategory_1 != None:
                                get_Subcategory_1 = j.Product.Subcategory_1.Subcategory_1
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] + [get_Subcategory_1])
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("C")
    
                    return response
    
    
                elif Select_Fields_to_Export_Vendor:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'Vendor'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price

                            if j.Product.Vendors:
                                get_vendor_name = j.Product.Vendors.vendor_name
                            else:
                                get_vendor_name = 'Empty'
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] +[get_vendor_name] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("D ")
    
                    return response
    
    
    
                elif Select_Fields_to_Export_product_link:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted', 'product link'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product=0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug = i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
    
                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)

                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted] )
                        creat_one_row = []
                        Item_No = Item_No+1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("E")
    
    
    
                    return response
    
    
                else:
    
                    response = HttpResponse(content_type='text/csv')
                    response['Content-Disposition'] = f'attachment; filename= {date}.csv'
                    writer = csv.writer(response)
    
                    writer.writerow(['Item No.', 'Item Name', 'Quantity', 'Total MRP', 'Total Cost', 'Total Discounted'])
                    Item_No = 1
                    UNIQ_PRODUCT_NAME = []
                    creat_one_row = []
                    TOTAL_Quantity_of_product = 0
                    Total_MRP = 0
                    Total_Cost = 0
                    Total_Discounted = 0
                    Total_Discounted = 0
    
                    for i in get_total_Order_Table_2:
                        if i.Product.slug not in UNIQ_PRODUCT_NAME:
                            UNIQ_PRODUCT_NAME.append(i.Product.slug)
    
                    for i in UNIQ_PRODUCT_NAME:
                        find_spaciafic_product_row = get_total_Order_Table_2.filter(Product__slug=i)
                        for j in find_spaciafic_product_row:
                            TOTAL_Quantity_of_product = TOTAL_Quantity_of_product + j.Quantity
                            product_name = j.Product.Product_Name
                            Total_MRP = Total_MRP + j.MRP_price
                            Total_Cost = Total_Cost + j.Cost_price
                            Total_Discounted = Total_Discounted + j.MRP_price - j.then_price
    
                        Total_MRP= Total_MRP*TOTAL_Quantity_of_product
                        Total_Cost= Total_Cost*TOTAL_Quantity_of_product
                        Total_Discounted= Total_Discounted*TOTAL_Quantity_of_product

                        creat_one_row.append(product_name)
                        creat_one_row.append(TOTAL_Quantity_of_product)
    
                        writer.writerow([Item_No] + creat_one_row + [Total_MRP] + [Total_Cost] + [Total_Discounted])
                        creat_one_row = []
                        Item_No = Item_No + 1
                        TOTAL_Quantity_of_product = 0
                        Total_MRP = 0
                        Total_Cost = 0
                        Total_Discounted = 0
                        print("No value")
    
                    return response
    
    
    
            elif i_am_Generate_PO == 'Generate P/O':

    
                for i in get_total_Order_Table_2:
                    if i.Vendors:
                        vendor_name = i.Vendors.vendor_name
                        company_name = i.Vendors.vendor_shop_name
                        vendor_address_get = i.Vendors.vendor_address
                        vendor_mobile = i.Vendors.vendor_phone_no
                        o = i.Vendors

                        print("hjhdjsdhjsdhjsdhjdh")
                        print(o)
                        print(o)
                        print(o)



                    else:
                        vendor_name = ''
                        company_name = ''
                        vendor_address_get = ''
                        vendor_mobile = ''

                get_vendor_payment_info = vendor_payment_info.objects.get(Vendor = o)

                print("get_vendor_payment_info")
                print(get_vendor_payment_info)

                po_vendor_PO_NUMBER  = vendor_PO_NUMBER.objects.all()
                if po_vendor_PO_NUMBER:
                    po_vendor_PO_NUMBER  = vendor_PO_NUMBER.objects.last()
                    value_po_vendor_PO_NUMBER = po_vendor_PO_NUMBER.Vendor_po_Number + 1
                else:
                    value_po_vendor_PO_NUMBER = 50000

                if vendor_mobile:
                    save_po_vendor = vendor_PO_NUMBER(Vendor = o , Vendor_po_Number = value_po_vendor_PO_NUMBER)
                    save_po_vendor.save()

                n = 4
                m = 3
    
                val = [0] * n
                for x in range(n):
                    val[x] = [4, 6, 7] * m
    
                print("valvalvalval")
                print(val)
                print("valvalvalval")
    
                # Create the HttpResponse object with the appropriate PDF headers.
                response = HttpResponse(content_type='application/pdf')
                response['Content-Disposition'] = f'attachment; filename=PO {value_po_vendor_PO_NUMBER}.pdf'
    
                # Create the PDF object, using the response object as its "file."
                p = canvas.Canvas(response)
    
                # Draw things on the PDF. Here's where the PDF generation happens.
                # See the ReportLab documentation for the full list of functionality.
                # p.drawString((+)left, (+)Top, "Hello world.")
                # p.drawString(320, 780, "Boom Boom Shopping")
                # p.drawString(320, 765, "House-11, Road-18, Flat-6E, Sector-04")
                # p.drawString(320, 750, "Uttara, Dhaka-1230, Bangladesh")
                # p.drawString(320, 735, "Phone : 09642601538")
                # p.drawString(320, 720, "Mail: support@boomboom.com.bd")
                #
    
                # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                # p.drawImage(i, 0, 733, width=594, height=110)
                #
                # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                # p.drawImage(ii, 0, -20, width=594, height=110)
                #
                i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                p.drawImage(i, 0, 733, width=594, height=110)

                ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                p.drawImage(ii, 0, -20, width=594, height=110)
    
    
                p.setFont("Helvetica", 10)
                p.drawString(20, 705, "Name: " + str(vendor_name))
                p.drawString(20, 705, "Name: " + str(vendor_name))
                now = datetime.datetime.now().date()
                date_today_get = now.strftime("%d-%m-%Y")
    
                p.drawString(20, 690, "Company Name: " + str(company_name))
                p.drawString(20, 675, "Address: " + str(vendor_address_get))
                p.drawString(20, 660, "Mobile: " + str(vendor_mobile))
                p.drawString(460, 705, "Date: " + date_today_get)
                p.drawString(460, 690, "PO No: " + str(value_po_vendor_PO_NUMBER))
    
                for i in get_total_Order_Table_2:
                    print("len(get_total_Order_Table_2)")
                    print(len(get_total_Order_Table_2))
    
                UNIQ_PRODUCT_NAME_FOR_PDF = []
                col_list = []
                total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                TOTAL_Quantity_of_product_for_pdf=0
                Item_No=0
                total_ammount_for_total = 0
    
                for i in get_total_Order_Table_2:
                    if i.Product.slug not in UNIQ_PRODUCT_NAME_FOR_PDF:
                        UNIQ_PRODUCT_NAME_FOR_PDF.append(i.Product.slug)
    
                for i in UNIQ_PRODUCT_NAME_FOR_PDF:
                    find_spaciafic_product_row_for_pdf = get_total_Order_Table_2.filter(Product__slug=i)
                    for j in find_spaciafic_product_row_for_pdf:
                        TOTAL_Quantity_of_product_for_pdf = TOTAL_Quantity_of_product_for_pdf + j.Quantity
                        product_name = j.Product.Product_Name
                        ONE_MRP = j.MRP_price
                        ONE_Cost = j.Cost_price
                    Item_No = Item_No+1
                    total_cost = TOTAL_Quantity_of_product_for_pdf * ONE_Cost
                    total_ammount_for_total = total_ammount_for_total + total_cost
    
    
    
                    col_list.append(str(Item_No))
                    col_list.append(product_name)
                    col_list.append(str(TOTAL_Quantity_of_product_for_pdf))
                    col_list.append(str(ONE_MRP))
                    col_list.append(str(ONE_Cost))
                    col_list.append(str(total_cost))
    
                    total_row_list.append(col_list)
                    col_list=[]
    
    
    
    
    
    
                    TOTAL_Quantity_of_product_for_pdf = 0
    
                    print("Item_No + product_name + TOTAL_Quantity_of_product_for_pdf + ONE_MRP + ONE_Cost + total_cost")
                    print(str(Item_No) +'     '+ product_name +'     '+ str(TOTAL_Quantity_of_product_for_pdf) +'     '+ str(ONE_MRP) +'     '+ str(ONE_Cost) +'     '+ str(total_cost))
                    print('total_row_list')
                    print(len(total_row_list))
                    print('total_row_list')
    
    
                print("TOTAL_Quantity_of_product_for_pdf")
                print(TOTAL_Quantity_of_product_for_pdf)
                print("TOTAL_Quantity_of_product_for_pdf")
    
    
    
    
                doc = SimpleDocTemplate("simple_table_grid.pdf", pagesize=(210*mm,297*mm))
                # container for the 'Flowable' objects
                elements = []
                x1 = '00rrrrrrrrrrrrrrrrrrrrrr'
                data = [[x1, '01', '02', '03', '04', 'o'],
                        ['10', '11', '12', '13', '14', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['20', '21', '22', '23', '24', 'o'],
                        ['30', '31', '32', '33', '34', 'o']
    
    
                        ]
    
                P=[[x1, '01', '02', '03', '04']]
    
    
                # t = Table(total_row_list, colWidths=[.5*inch, 3.7*inch, .7*inch, .8*inch, .8*inch, 1.1*inch])
                # t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                #                        ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                #                        ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                #                        # ('TEXTCOLOR', (1, 1), (-2, -2), colors.red),
                #                        ('VALIGN', (0, 0), (0, -1), 'TOP'),
                #                        # ('TEXTCOLOR', (0, 0), (0, -1), colors.blue),
                #                        # ('ALIGN', (0, -1), (-1, -1), 'RIGHT'),
                #                        ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                #                        # ('TEXTCOLOR', (0, -1), (-1, -1), colors.green),
                #                        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                #                        ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                #                        ]))
                #
                # elements.append(t)
                # # write the document to disk
                # doc.build(elements)
                # width = 600
                # height = 100
                # t.wrapOn(p, width, height)
                # t.drawWidth = 10.25*inch
    
                if len(total_row_list) < 21:
    
                    t = Table(total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           # ('TEXTCOLOR', (1, 1), (-2, -2), colors.red),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           # ('TEXTCOLOR', (0, 0), (0, -1), colors.blue),
                                           # ('ALIGN', (0, -1), (-1, -1), 'RIGHT'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           # ('TEXTCOLOR', (0, -1), (-1, -1), colors.green),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    # write the document to disk
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(total_row_list) == 20:
                        t.drawOn(p, 20, 230)
                    #
                    #
                    # elif len(total_row_list) == 21:
                    #     t.drawOn(p, 20, 310)
                    #
                    #
                    # elif len(total_row_list) == 22:
                    #     t.drawOn(p, 20, 295)
                    #
                    # elif len(total_row_list) == 23:
                    #     t.drawOn(p, 20, 280)
                    #
                    #
                    # elif len(total_row_list) == 24:
                    #     t.drawOn(p, 20, 265)
                    #
                    #
                    # elif len(total_row_list) == 25:
                    #     t.drawOn(p, 20, 250)
                    #
                    # elif len(total_row_list) == 26:
                    #     t.drawOn(p, 20, 235)
                    #
                    # elif len(total_row_list) == 27:
                    #     t.drawOn(p, 20, 220)
    
                    if len(total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
                    
                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                elif len(total_row_list) > 20 and len(total_row_list) < 41:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20:
                            spelt_2_total_row_list.append(i)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_2_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_2_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_2_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_2_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_2_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_2_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_2_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_2_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_2_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_2_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_2_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_2_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_2_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_2_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_2_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_2_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_2_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_2_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_2_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_2_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_2_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_2_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
                elif len(total_row_list) > 40 and len(total_row_list) < 61:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
                        elif count_it > 40:
                            spelt_3_total_row_list.append(i)
                            
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
                    #
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_3_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_3_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_3_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_3_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_3_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_3_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_3_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_3_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_3_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_3_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_3_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_3_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_3_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_3_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_3_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_3_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_3_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_3_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_3_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_3_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_3_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_3_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
                elif len(total_row_list) > 60 and len(total_row_list) < 81:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
                        elif count_it > 60:
                            spelt_4_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_4_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_4_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_4_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_4_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_4_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_4_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_4_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_4_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_4_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_4_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_4_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_4_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_4_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_4_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_4_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_4_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_4_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_4_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_4_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_4_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_4_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_4_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
                elif len(total_row_list) > 80 and len(total_row_list) < 101:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
                        elif count_it > 80:
                            spelt_5_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_5_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_5_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_5_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_5_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_5_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_5_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_5_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_5_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_5_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_5_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_5_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_5_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_5_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_5_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_5_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_5_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_5_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_5_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_5_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_5_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_5_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_5_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
                elif len(total_row_list) > 100 and len(total_row_list) < 121:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100:
                            spelt_6_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_6_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_6_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_6_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_6_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_6_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_6_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_6_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_6_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_6_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_6_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_6_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_6_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_6_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_6_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_6_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_6_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_6_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_6_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_6_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_6_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_6_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_6_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
                elif len(total_row_list) > 120 and len(total_row_list) < 141:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120:
                            spelt_7_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_7_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_7_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_7_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_7_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_7_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_7_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_7_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_7_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_7_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_7_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_7_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_7_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_7_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_7_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_7_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_7_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_7_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_7_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_7_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_7_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_7_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_7_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
                elif len(total_row_list) > 140 and len(total_row_list) < 161:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140:
                            spelt_8_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_8_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_8_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_8_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_8_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_8_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_8_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_8_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_8_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_8_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_8_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_8_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_8_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_8_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_8_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_8_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_8_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_8_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_8_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_8_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_8_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_8_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_8_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 160 and len(total_row_list) < 181:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160:
                            spelt_9_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_9_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_9_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_9_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_9_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_9_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_9_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_9_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_9_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_9_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_9_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_9_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_9_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_9_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_9_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_9_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_9_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_9_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_9_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_9_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_9_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_9_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_9_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
                elif len(total_row_list) > 180 and len(total_row_list) < 201:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180:
                            spelt_10_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_10_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_10_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_10_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_10_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_10_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_10_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_10_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_10_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_10_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_10_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_10_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_10_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_10_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_10_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_10_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_10_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_10_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_10_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_10_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_10_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_10_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_10_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 200 and len(total_row_list) < 221:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200:
                            spelt_11_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_11_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_11_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_11_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_11_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_11_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_11_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_11_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_11_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_11_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_11_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_11_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_11_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_11_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_11_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_11_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_11_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_11_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_11_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_11_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_11_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_11_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_11_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
    
                elif len(total_row_list) > 220 and len(total_row_list) < 241:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220:
                            spelt_12_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_12_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_12_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_12_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_12_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_12_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_12_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_12_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_12_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_12_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_12_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_12_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_12_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_12_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_12_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_12_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_12_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_12_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_12_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_12_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_12_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_12_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_12_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 240 and len(total_row_list) < 261:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240:
                            spelt_13_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_13_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_13_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_13_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_13_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_13_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_13_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_13_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_13_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_13_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_13_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_13_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_13_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_13_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_13_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_13_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_13_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_13_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_13_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_13_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_13_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_13_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_13_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 260 and len(total_row_list) < 281:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260:
                            spelt_14_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_14_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_14_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_14_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_14_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_14_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_14_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_14_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_14_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_14_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_14_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_14_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_14_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_14_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_14_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_14_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_14_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_14_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_14_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_14_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_14_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_14_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_14_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 280 and len(total_row_list) < 301:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280:
                            spelt_15_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_15_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_15_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_15_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_15_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_15_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_15_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_15_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_15_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_15_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_15_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_15_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_15_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_15_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_15_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_15_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_15_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_15_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_15_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_15_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_15_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_15_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_15_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 300 and len(total_row_list) < 321:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300:
                            spelt_16_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_16_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_16_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_16_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_16_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_16_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_16_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_16_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_16_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_16_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_16_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_16_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_16_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_16_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_16_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_16_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_16_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_16_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_16_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_16_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_16_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_16_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_16_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
                elif len(total_row_list) > 320 and len(total_row_list) < 341:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_17_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300 and count_it < 321:
                            spelt_16_total_row_list.append(i)
    
                        elif count_it > 320:
                            spelt_17_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
                    print(spelt_17_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_17_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_17_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_17_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_17_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_17_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_17_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_17_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_17_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_17_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_17_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_17_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_17_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_17_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_17_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_17_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_17_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_17_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_17_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_17_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_17_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_17_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_17_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_17_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
                elif len(total_row_list) > 340 and len(total_row_list) < 361:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_17_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_18_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300 and count_it < 321:
                            spelt_16_total_row_list.append(i)
    
                        elif count_it > 320 and count_it < 341:
                            spelt_17_total_row_list.append(i)
    
                        elif count_it > 340:
                            spelt_18_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
                    print(spelt_17_total_row_list)
                    print(spelt_18_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_17_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_18_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_18_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_18_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_18_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_18_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_18_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_18_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_18_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_18_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_18_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_18_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_18_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_18_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_18_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_18_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_18_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_18_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_18_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_18_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_18_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_18_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_18_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_18_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
                elif len(total_row_list) > 360 and len(total_row_list) < 381:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_17_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_18_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_19_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300 and count_it < 321:
                            spelt_16_total_row_list.append(i)
    
                        elif count_it > 320 and count_it < 341:
                            spelt_17_total_row_list.append(i)
    
                        elif count_it > 340 and count_it < 361:
                            spelt_18_total_row_list.append(i)
    
                        elif count_it > 360:
                            spelt_19_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
                    print(spelt_17_total_row_list)
                    print(spelt_18_total_row_list)
                    print(spelt_19_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_17_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_18_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_19_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_19_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_19_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_19_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_19_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_19_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_19_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_19_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_19_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_19_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_19_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_19_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_19_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_19_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_19_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_19_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_19_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_19_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_19_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_19_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_19_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_19_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_19_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
    
                elif len(total_row_list) > 380 and len(total_row_list) < 401:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_17_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_18_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_19_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_20_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300 and count_it < 321:
                            spelt_16_total_row_list.append(i)
    
                        elif count_it > 320 and count_it < 341:
                            spelt_17_total_row_list.append(i)
    
                        elif count_it > 340 and count_it < 361:
                            spelt_18_total_row_list.append(i)
    
                        elif count_it > 360 and count_it < 381:
                            spelt_19_total_row_list.append(i)
    
                        elif count_it > 380:
                            spelt_20_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
                    print(spelt_17_total_row_list)
                    print(spelt_18_total_row_list)
                    print(spelt_19_total_row_list)
                    print(spelt_20_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_17_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_18_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_19_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_20_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_20_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_20_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_20_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_20_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_20_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_20_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_20_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_20_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_20_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_20_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_20_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_20_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_20_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_20_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_20_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_20_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_20_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_20_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_20_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_20_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_20_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_20_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
    
    
    
    
                elif len(total_row_list) > 400 and len(total_row_list) < 421:
                    count_it = 0
                    spelt_1_total_row_list = []
                    spelt_2_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_3_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_4_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_5_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_6_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_7_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_8_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_9_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_10_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_11_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_12_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_13_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_14_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_15_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_16_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_17_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_18_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_19_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_20_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
                    spelt_21_total_row_list = [['No.', 'Product Name', 'Quantity', 'MRP', 'Cost', 'Total Amount']]
    
                    for i in total_row_list:
                        count_it = count_it + 1
                        if count_it < 21:
                            spelt_1_total_row_list.append(i)
                        elif count_it > 20 and count_it < 41:
                            spelt_2_total_row_list.append(i)
    
                        elif count_it > 40 and count_it < 61:
                            spelt_3_total_row_list.append(i)
    
                        elif count_it > 60 and count_it < 81:
                            spelt_4_total_row_list.append(i)
    
                        elif count_it > 80 and count_it < 101:
                            spelt_5_total_row_list.append(i)
    
                        elif count_it > 100 and count_it < 121:
                            spelt_6_total_row_list.append(i)
    
                        elif count_it > 120 and count_it < 141:
                            spelt_7_total_row_list.append(i)
    
                        elif count_it > 140 and count_it < 161:
                            spelt_8_total_row_list.append(i)
    
                        elif count_it > 160 and count_it < 181:
                            spelt_9_total_row_list.append(i)
    
                        elif count_it > 180 and count_it < 201:
                            spelt_10_total_row_list.append(i)
    
                        elif count_it > 200 and count_it < 221:
                            spelt_11_total_row_list.append(i)
    
                        elif count_it > 220 and count_it < 241:
                            spelt_12_total_row_list.append(i)
    
                        elif count_it > 240 and count_it < 261:
                            spelt_13_total_row_list.append(i)
    
                        elif count_it > 260 and count_it < 281:
                            spelt_14_total_row_list.append(i)
    
                        elif count_it > 280 and count_it < 301:
                            spelt_15_total_row_list.append(i)
    
                        elif count_it > 300 and count_it < 321:
                            spelt_16_total_row_list.append(i)
    
                        elif count_it > 320 and count_it < 341:
                            spelt_17_total_row_list.append(i)
    
                        elif count_it > 340 and count_it < 361:
                            spelt_18_total_row_list.append(i)
    
                        elif count_it > 360 and count_it < 381:
                            spelt_19_total_row_list.append(i)
    
                        elif count_it > 380 and count_it < 401:
                            spelt_20_total_row_list.append(i)
    
                        elif count_it > 400:
                            spelt_21_total_row_list.append(i)
    
                    print('spelt_1_total_row_list')
                    print(spelt_1_total_row_list)
                    print(spelt_2_total_row_list)
                    print(spelt_3_total_row_list)
                    print(spelt_4_total_row_list)
                    print(spelt_5_total_row_list)
                    print(spelt_6_total_row_list)
                    print(spelt_7_total_row_list)
                    print(spelt_8_total_row_list)
                    print(spelt_9_total_row_list)
                    print(spelt_10_total_row_list)
                    print(spelt_11_total_row_list)
                    print(spelt_12_total_row_list)
                    print(spelt_13_total_row_list)
                    print(spelt_14_total_row_list)
                    print(spelt_15_total_row_list)
                    print(spelt_16_total_row_list)
                    print(spelt_17_total_row_list)
                    print(spelt_18_total_row_list)
                    print(spelt_19_total_row_list)
                    print(spelt_20_total_row_list)
                    print(spelt_21_total_row_list)
    
                    t = Table(spelt_1_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
                    t = Table(spelt_2_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_3_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
                    t = Table(spelt_4_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
                    t = Table(spelt_5_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_6_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_7_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_8_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
    
                    t = Table(spelt_9_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_10_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_11_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_12_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_13_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_14_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_15_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_16_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_17_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_18_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    t = Table(spelt_19_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
    
                    t = Table(spelt_20_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
                    t.drawOn(p, 20, 230)
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    p.showPage()
    
    
    
    
                    # i = 'https://idjangoo.com/static/images/latter-Head-copy.jpg'
                    # p.drawImage(i, 0, 733, width=594, height=110)
    
                    # ii = 'https://idjangoo.com/static/images/latter-Head-copy2.jpg'
                    # p.drawImage(ii, 0, -20, width=594, height=110)

                    i = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy.jpg'
                    p.drawImage(i, 0, 733, width=594, height=110)

                    ii = f'{MEDIA_ROOT}\Latter Head\latter-Head-copy2.jpg'
                    p.drawImage(ii, 0, -20, width=594, height=110)
    
                    p.setFont("Helvetica", 10)
                    p.drawString(20, 705, "Name:")
                    now = datetime.datetime.now().date()
                    date_today_get = now.strftime("%d-%m-%Y")
    
                    p.drawString(20, 690, "Company Name:")
                    p.drawString(20, 675, "Address:")
                    p.drawString(20, 660, "Mobile:")
                    p.drawString(460, 705, "Date: " + date_today_get)
                    p.drawString(460, 690, "PO No:")
    
                    # p.setFont("Helvetica", 10)
                    # p.drawString(20, 190, "Payment Information:- ")
                    # p.drawString(20, 175, "Bank Name:- ")
                    # p.drawString(20, 160, "Account Name:- ")
                    # p.drawString(20, 145, "Account Number:- ")
                    # p.drawString(20, 130, "Branch:- ")
                    # p.drawString(20, 115, "Routing Number:- ")

                    if get_vendor_payment_info.vendor_payment_roll == 'SSLCommerz':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "SSLCommerz:- "+ str(get_vendor_payment_info.SSL_operator))
                        p.drawString(20, 160, "Number:- "+ str(get_vendor_payment_info.SSL_Mobile_Number))
                    if get_vendor_payment_info.vendor_payment_roll == 'Bank Deposite':
                        p.setFont("Helvetica", 10)
                        p.drawString(20, 190, "Payment Information:- ")
                        p.drawString(20, 175, "Bank Name:- "+ str(get_vendor_payment_info.Bank_Name))
                        p.drawString(20, 160, "Account Name:- "+ str(get_vendor_payment_info.Account_Name))
                        p.drawString(20, 145, "Account Number:- "+ str(get_vendor_payment_info.Account_Number))
                        p.drawString(20, 130, "Branch:- "+ str(get_vendor_payment_info.Branch))
                        p.drawString(20, 115, "Routing Number:- "+ str(get_vendor_payment_info.Routing_Number))
    
                    t = Table(spelt_21_total_row_list, colWidths=[.5 * inch, 3.7 * inch, .7 * inch, .8 * inch, .8 * inch, 1.1 * inch])
                    t.setStyle(TableStyle([('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                           ('ALIGN', (0, 0), (5, 0), 'CENTER'),
                                           ('FONTNAME', (0, 0), (5, 0), 'Helvetica-Bold'),
                                           ('VALIGN', (0, 0), (0, -1), 'TOP'),
                                           ('VALIGN', (0, -1), (-1, -1), 'MIDDLE'),
                                           ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                                           ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
                                           ]))
    
                    elements.append(t)
                    doc.build(elements)
                    width = 600
                    height = 100
                    t.wrapOn(p, width, height)
    
                    if len(spelt_21_total_row_list) == 1:
                        t.drawOn(p, 20, 610)
    
                    elif len(spelt_21_total_row_list) == 2:
                        t.drawOn(p, 20, 590)
    
                    elif len(spelt_21_total_row_list) == 3:
                        t.drawOn(p, 20, 570)
    
                    elif len(spelt_21_total_row_list) == 4:
                        t.drawOn(p, 20, 550)
    
                    elif len(spelt_21_total_row_list) == 5:
                        t.drawOn(p, 20, 530)
    
                    elif len(spelt_21_total_row_list) == 6:
                        t.drawOn(p, 20, 510)
    
                    elif len(spelt_21_total_row_list) == 7:
                        t.drawOn(p, 20, 490)
    
                    elif len(spelt_21_total_row_list) == 8:
                        t.drawOn(p, 20, 470)
    
                    elif len(spelt_21_total_row_list) == 9:
                        t.drawOn(p, 20, 450)
    
                    elif len(spelt_21_total_row_list) == 10:
                        t.drawOn(p, 20, 430)
    
                    elif len(spelt_21_total_row_list) == 11:
                        t.drawOn(p, 20, 410)
    
                    elif len(spelt_21_total_row_list) == 12:
                        t.drawOn(p, 20, 390)
    
                    elif len(spelt_21_total_row_list) == 13:
                        t.drawOn(p, 20, 370)
    
                    elif len(spelt_21_total_row_list) == 14:
                        t.drawOn(p, 20, 350)
    
                    elif len(spelt_21_total_row_list) == 15:
                        t.drawOn(p, 20, 330)
    
                    elif len(spelt_21_total_row_list) == 16:
                        t.drawOn(p, 20, 310)
    
                    elif len(spelt_21_total_row_list) == 17:
                        t.drawOn(p, 20, 290)
    
                    elif len(spelt_21_total_row_list) == 18:
                        t.drawOn(p, 20, 270)
    
                    elif len(spelt_21_total_row_list) == 19:
                        t.drawOn(p, 20, 250)
    
                    elif len(spelt_21_total_row_list) == 20:
                        t.drawOn(p, 20, 230)
    
    
    
                    if len(spelt_21_total_row_list) == 1:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 2:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 575, "TOTAL =       " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 3:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 555, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 4:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 540, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 5:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 520, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 6:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 495, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 7:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 475, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 8:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 455, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 9:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 435, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 10:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 415, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 11:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 395, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 12:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 375, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 13:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 355, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 14:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 335, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 15:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 315, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 16:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 295, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 17:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 275, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 18:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 255, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 19:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 235, "TOTAL =      " + str(total_ammount_for_total))
    
                    elif len(spelt_21_total_row_list) == 20:
                        p.setFont("Helvetica", 10)
                        p.drawString(435, 215, "TOTAL =      " + str(total_ammount_for_total))
    
    
                    p.showPage()
    
                else:
                    return HttpResponse("sorry we can track only 420 item..it's seems more then 420.")
    
                p.save()
                return response
    
    
    
        elif name_dashboard_csv_order == 'value_dashboard_csv_order':
    
            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = f'attachment; filename= campaign order.csv'
            writer = csv.writer(response)
    
            writer.writerow(
                ['Order ID', 'Order Status', 'Order Date', 'Paid Date', 'Street Address', 'Town City', 'District', 'Payment Method', 'Order Total', 'Total Discount', 'Transaction Id', 'Customer Email', 'Customer User ID', 'Shipping Method', 'Order Notes', 'Item Number', 'Item Name', 'Item Quantity'])
    
            i_value='3'
            main_coun=0
            sub_main_coun=0
            uniq_id_for_order_csv = []
            uniq_one_item_for_order_csv_p = []
            uniq_item_for_order_csv_p = []
            get_order_total = 0
            get_MRP_total = 0
            get_discount_total = 0
            count_for_item_number_for_only_csv = 0
            for i in get_total_Order_Table_2:
                i_New_Order_Status = i.New_Order_Status
                if i_New_Order_Status:
                    uniq_id_for_order_csv.append(i.New_Order_Id)
    
                else:
                    k = i.Order_Id.Order_Id
                    if k not in uniq_id_for_order_csv:
                        uniq_id_for_order_csv.append(k)
            print(uniq_id_for_order_csv)
    
            for i in uniq_id_for_order_csv:
                ii = i
                get_the_row = get_total_Order_Table_2.filter(Order_Id__Order_Id = i)
                print('kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk')
                print(i)
                print(get_the_row)
                
                if get_the_row:
                    for j in get_the_row:
                        if j.New_Order_Id:
                            pass
                        else:
                            quantity_total = j.Quantity * j.then_price
                            get_order_total = get_order_total + quantity_total
                            get_MRP_total = get_MRP_total + (j.MRP_price*j.Quantity)
                            get_discount_total = get_MRP_total - get_order_total
                            print('j.Attribute')
                            print(j.Attribute)
                            get_total_att =''
                            if j.Attribute:
                                count_for_item_number_for_only_csv = count_for_item_number_for_only_csv + 1
                                uniq_one_item_for_order_csv_p.append(count_for_item_number_for_only_csv)
                                if j.Attribute.Size:
                                    get_total_att = get_total_att+' '+ j.Attribute.Size
                                if j.Attribute.Color:
                                    get_total_att = get_total_att+' ' + j.Attribute.Color
                                if j.Attribute.Flavor:
                                    get_total_att = get_total_att+' ' + j.Attribute.Flavor
                                if j.Attribute.Variation:
                                    get_total_att = get_total_att+' ' + j.Attribute.Variation
                                if j.Attribute.Weight:
                                    get_total_att = get_total_att+' ' + j.Attribute.Weight
                                if j.Attribute.Volume:
                                    get_total_att = get_total_att+' ' + j.Attribute.Volume
                                if j.Attribute.Quantity:
                                    get_total_att = get_total_att+' ' + j.Attribute.Quantity
                                if j.Attribute.Values:
                                    get_total_att = get_total_att+' ' + j.Attribute.Values
                                if j.Attribute.Material_Type:
                                    get_total_att = get_total_att+' ' + j.Attribute.Material_Type
                                if j.Attribute.Product_Type:
                                    get_total_att = get_total_att+' ' + j.Attribute.Product_Type
                                if j.Attribute.Verification:
                                    get_total_att = get_total_att+' ' + j.Attribute.Verification
                                if j.Attribute.Quality:
                                    get_total_att = get_total_att+' ' + j.Attribute.Quality
                                if j.Attribute.Marketing_Claims:
                                    get_total_att = get_total_att+' ' + j.Attribute.Marketing_Claims
                                if j.Attribute.Design:
                                    get_total_att = get_total_att+' ' + j.Attribute.Design
                                if j.Attribute.Smell:
                                    get_total_att = get_total_att+' ' + j.Attribute.Smell
                                if j.Attribute.Reliability:
                                    get_total_att = get_total_att+' ' + j.Attribute.Reliability
                                if j.Attribute.Content:
                                    get_total_att = get_total_att+' ' + j.Attribute.Content
                                if j.Attribute.Safety:
                                    get_total_att = get_total_att+' ' + j.Attribute.Safety
                                if j.Attribute.Package:
                                    get_total_att = get_total_att+' ' + j.Attribute.Package
                                if j.Attribute.Model:
                                    get_total_att = get_total_att +' '+ j.Attribute.Model
                                if j.Attribute.Taste:
                                    get_total_att = get_total_att+' ' + j.Attribute.Taste
                                if j.Attribute.Feel:
                                    get_total_att = get_total_att+' ' + j.Attribute.Feel
                                if j.Attribute.Defferent_Type:
                                    get_total_att = get_total_att+' ' + j.Attribute.Defferent_Type
    
    
    
                                name_attribute = j.Product.Product_Name + str(' ') + str(get_total_att)
                                uniq_one_item_for_order_csv_p.append(name_attribute)
                                uniq_one_item_for_order_csv_p.append(j.Quantity)
                                
                            else:
                                print('ppppppppp')
                                print(j.Product)
                                print(j.Product.slug)
                                if j.Product.slug not in uniq_item_for_order_csv_p:
                                    print('j.Product.Product_Name')
                                    print(j.Product.Product_Name)
                                    count_for_item_number_for_only_csv = count_for_item_number_for_only_csv + 1
                                    uniq_one_item_for_order_csv_p.append(count_for_item_number_for_only_csv)
                                    uniq_one_item_for_order_csv_p.append(j.Product.Product_Name)
                                    uniq_one_item_for_order_csv_p.append(j.Quantity)
                                    uniq_item_for_order_csv_p.append(j.Product.slug)
                            print('uniq_one_item_for_order_csv_pppppp')
                            print(uniq_one_item_for_order_csv_p)
                    writer.writerow([ii]+[str(j.Order_Id.Order_Status)] + [j.Order_Id.Order_Date] + [j.Order_Id.Paid_Date] + [j.Order_Id.Customer_delivery_information.Street_Address] + [j.Order_Id.Customer_delivery_information.Town_City] + [j.Order_Id.Customer_delivery_information.District] + [j.Order_Id.Payment_method] + [str(get_order_total)] + [str(get_discount_total)] + [''] + [j.Order_Id.Customer_delivery_information.Email_Address] + [str(j.Order_Id.Customer_delivery_information.Customer.username)] + [j.Order_Id.Shopping] + ['notes'] + [uniq_one_item_for_order_csv_p[o] for o in range(0, len(uniq_one_item_for_order_csv_p))])
                    get_order_total = 0
                    get_MRP_total = 0
                    get_discount_total = 0
                    count_for_item_number_for_only_csv = 0
                    uniq_one_item_for_order_csv_p= []
                    uniq_item_for_order_csv_p=[]
                else:
                    get_the_row = get_total_Order_Table_2.filter(New_Order_Id = i)
                    print('get_the_row')
                    print(get_the_row)
                    for j in get_the_row:
                        kk = j.New_Order_Id
                        quantity_total = j.Quantity * j.then_price
                        get_order_total = get_order_total + quantity_total
                        get_MRP_total = get_MRP_total + (j.MRP_price * j.Quantity)
                        get_discount_total = get_MRP_total - get_order_total
    
                        if j.Product.slug not in uniq_item_for_order_csv_p:
                            count_for_item_number_for_only_csv = count_for_item_number_for_only_csv + 1
                            uniq_one_item_for_order_csv_p.append(count_for_item_number_for_only_csv)
                            uniq_one_item_for_order_csv_p.append(j.Product.Product_Name)
                            uniq_one_item_for_order_csv_p.append(j.Quantity)
                            uniq_item_for_order_csv_p.append(j.Product.slug)
                    writer.writerow([kk] + [str(j.New_Order_Status)] + [j.Order_Id.Order_Date] + [j.Order_Id.Paid_Date] + [j.Order_Id.Customer_delivery_information.Street_Address] + [j.Order_Id.Customer_delivery_information.Town_City] + [j.Order_Id.Customer_delivery_information.District] + [j.Order_Id.Payment_method] + [str(get_order_total)] + [str(get_discount_total)] + [''] + [j.Order_Id.Customer_delivery_information.Email_Address] + [str(j.Order_Id.Customer_delivery_information.Customer.username)] + [j.Order_Id.Shopping] + ['notes'] + [uniq_one_item_for_order_csv_p[o] for o in range(0, len(uniq_one_item_for_order_csv_p))])
                    get_order_total = 0
                    get_MRP_total = 0
                    get_discount_total = 0
                    count_for_item_number_for_only_csv = 0
                    uniq_one_item_for_order_csv_p = []
                    uniq_item_for_order_csv_p = []
    
                uniq_one_item_for_order_csv_p = []
    
    
    
    
    
    
    
    
    
    
    
                # i_New_Order_Status = i.New_Order_Status
                # if i_New_Order_Status:
                #     sub_main_coun = sub_main_coun+1
                #     writer.writerow([i.New_Order_Id] + [sub_main_coun])
                #     print(i_New_Order_Status)
                #     continue
                # if i_value!=i.Order_Id.Order_Id:
                #     main_coun = main_coun + 1
                #     writer.writerow([i.Order_Id.Order_Id]+ [main_coun])
                #     print('uuuuuuuuuuuuuuuuuuuuuuu')
                #     print(i_value)
                #     print(i_New_Order_Status)
                # i_value =''
                # i_value = i.Order_Id.Order_Id
                #
                # if i_New_Order_Status:
                #     writer.writerow([i.New_Order_Id])
                # else:
                #     main_coun =main_coun + 1
                #     get_Order_Id = i.Order_Id.Order_Id
                #     writer.writerow([get_Order_Id]+[main_coun])
                #
                #
                #
    
    
    
    
            return response
    
    
    
        print("get_total_Order_Table_2")
        print(get_total_Order_Table_2)
    
        for i in get_total_Order_Table_2:
            print("i.id")
            print(i.id)
            # print("i.Category")
            # print(i.Category)
            # print("i.Order_Id.Paid_Date")
            # print(i.Order_Id.Paid_Date)
            # print("i.Order_Id.Order_Date")
            # print(i.Order_Id.Order_Date)
            # print("i.Order_Id.Order_Status")
            # print(i.Order_Id.Order_Status)
            # print("i.Order_Id.Customer.username")
            # print(i.Order_Id.Customer.username)
            # print("i.Order_Id.Payment_method")
            # print(i.Order_Id.Payment_method)
            # print("i.Order_Id.Shopping")
            # print(i.Order_Id.Shopping)
            #
    
    
    
        print("all_product_order_Order_Date")
        print(all_product_order_Order_Date)
        print(all_Product_start_from_date)
        print(all_Product_start_to_date)
    
    
        print(all_Product_processing)
        print(all_Product_Pending_Payment)
        print(all_Product_Partially_Paid)
        print(all_Product_Ready_To_Ship)
        print(all_Product_Completed)
        print(all_Product_Cancelled)
        print(all_Product_Refunded)
        print(all_Product_Picked)
        print(all_Product_On_hold)
        print(all_Product_Failed)
    
    
        print(all_product_Category_multiple)
        print(all_product_Products_multiple)
        print(all_product_Brand_Name_multiple)
        print(all_product_User_multiple)
        print(all_product_vendor_registration_table_multiple)
        print(all_product_vendor_Order_Table_multiple)
        print(all_product_vendor_Order_Table_Shopping_multiple)
    
    
        # print(Select_Fields_to_Export_Item_No)
        # print(Select_Fields_to_Export_Item_Name)
        # print(Select_Fields_to_Export_Quantity)
        # print(Select_Fields_to_Export_MRP)
        # print(Select_Fields_to_Export_Cost)
        # print(Select_Fields_to_Export_Discount)
        # print(Select_Fields_to_Export_Total_MRP)
        # print(Select_Fields_to_Export_Total_Cost)
        # print(Select_Fields_to_Export_Total_Discounted)
        print(Select_Fields_to_Export_Brands)
        print(Select_Fields_to_Export_Category)
        print(Select_Fields_to_Export_Subcategory_1)
        # print(Select_Fields_to_Export_Subcategory_2)
    
        print(Select_Fields_to_Export_Vendor)
        print(Select_Fields_to_Export_product_link)
    
    
    
        return redirect('dashboard_csv_product')
    else:
        return redirect('deshboard_login')















def dashboard_csv_order(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')
    
    
    if staff_admin or staff_admin or staff_customer_support or staff_upload_team:
        all_product_Category = Category.objects.all()
        all_product_Products = Products.objects.all()
        all_product_Brand = Brand.objects.all()
        all_product_User = User.objects.all()
        all_product_vendor_registration_table = vendor_registration_table.objects.all()
        all_product_Order_Table = Order_Table.objects.all()
        all_campaign_table = campaign_table.objects.all()
    
        contex = {
            'all_product_Category': all_product_Category,
            'all_product_Products': all_product_Products,
            'all_product_Brand': all_product_Brand,
            'all_product_User': all_product_User,
            'all_product_vendor_registration_table': all_product_vendor_registration_table,
            'all_product_Order_Table': all_product_Order_Table,
            'all_campaign_table': all_campaign_table,
    
        }
    
    
        return render(request, 'dashboard_csv_order.html', contex)
    else:
        return redirect('deshboard_login')




#this for category

def edited_catagory_dashboard(request, all_categories_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')


    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get = Category.objects.get(id = all_categories_id)
        contex = {
                    'row_get':row_get
                  }
        return render(request, 'edited_catagory_dashboard.html', contex)
    else:
        return redirect('deshboard_login')



def save_edited_catagory_dashboard(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:

        row_get_Category_Name = request.POST.get('row_get_Category_Name')
        row_get_Category_Name_id = request.POST.get('row_get_Category_Name_id')
        row_get = Category.objects.get(id=row_get_Category_Name_id)
        row_get.Category_Name = row_get_Category_Name
        row_get.save()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')



def delete_catagory_dashboard(request, all_categories_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get = Category.objects.get(id=all_categories_id)
        row_get.delete()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')


#this for subcategory 1

def edited_subcategories_1_dashboard(request, all_subcategories_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get = Subcategory_1.objects.get(id = all_subcategories_id)
        contex = {
                    'row_get':row_get
                  }
        return render(request, 'edited_subcatagory_1_dashboard.html', contex)

    else:
        return redirect('deshboard_login')



def save_edited_subcatagory_1_dashboard(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')
    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get_Subcategory_1 = request.POST.get('row_get_Subcategory_1')
        row_get_Subcategory_1_id = request.POST.get('row_get_Subcategory_1_id')
        row_get = Subcategory_1.objects.get(id=row_get_Subcategory_1_id)
        row_get.Subcategory_1 = row_get_Subcategory_1
        row_get.save()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')



def delete_subcategories_1_dashboard(request, all_subcategories_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:

        row_get = Subcategory_1.objects.get(id=all_subcategories_id)
        row_get.delete()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')

#this for subcategory 2

def edited_subcategories_2_dashboard(request, all_subcategories2_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')
    
    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get = Subcategory_2.objects.get(id = all_subcategories2_id)
        contex = {
                    'row_get':row_get
                  }
        return render(request, 'edited_subcatagory_2_dashboard.html', contex)
    else:
        return redirect('deshboard_login')


def save_edited_subcatagory_2_dashboard(request):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get_Subcategory_2 = request.POST.get('row_get_Subcategory_2')
        row_get_Subcategory_2_id = request.POST.get('row_get_Subcategory_2_id')
        row_get = Subcategory_2.objects.get(id=row_get_Subcategory_2_id)
        row_get.Subcategory_2 = row_get_Subcategory_2
        row_get.save()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')



def delete_subcategories_2_dashboard(request, all_subcategories2_id):
    staff_admin = request.session.get('deshboard_admin_username')
    staff_shop_manager = request.session.get('deshboard_shop_manager_username')
    staff_customer_support = request.session.get('deshboard_customer_support_username')
    staff_upload_team = request.session.get('deshboard_upload_team_username')

    if staff_admin or staff_shop_manager or staff_customer_support or staff_upload_team:
        row_get = Subcategory_2.objects.get(id=all_subcategories2_id)
        row_get.delete()
        return redirect('dashbord_Categories')
    else:
        return redirect('deshboard_login')

